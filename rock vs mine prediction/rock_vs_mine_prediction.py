# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D82giTLQD_aXXChF3LOsfWoNFToh9Cpr

importing the dependencies
"""

import numpy as np
!pip install pandas
import pandas as pd
!pip install sklearn
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and data processing 

"""

#loading th dataset to the pandas dataframe
sonar_data = pd.read_csv('/content/Copy of sonar data.csv', header=None)
#header is the name of the column

sonar_data.head()

# number of rows and columns
sonar_data.shape

sonar_data.describe() # describe gives statiscal measures of the data

sonar_data[60].value_counts()

"""M--> Mine
R--> Rock
"""

sonar_data.groupby(60).mean()

#separating data and labels
#unsupervised learninglabr=els are not there
X = sonar_data.drop(columns=60, axis=1) # for  row axis=0, for  column axis=1
Y = sonar_data[60]

print(X)
print(Y)

"""Training and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.1, stratify=Y, random_state=1 )
#test_size =0.1 means the 10% of data to test data
#stratify to split the data based on rock and mine
#random_state to split the data in particular manner changing the number will the data manner

print(X.shape,X_train.shape, X_test.shape)

print(X_train)
print(Y_train)

"""Model Training --> Logistic regression"""

model = LogisticRegression()

#training the logisticc regression model with training data
model.fit(X_train, Y_train)

"""Model: Evaluation"""

#accuracy on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy= accuracy_score(X_train_prediction, Y_train)
#We are going to compare the prediction of aur model and the original label of thes model

print('Accuracy on training data: ', training_data_accuracy)

#accuracy of the test data
X_test_prediction = model.predict(X_test)
testing_data_accuracy= accuracy_score(X_test_prediction, Y_test)

print('Accuracy on testing data: ', testing_data_accuracy)

"""Making a predictive system"""

input_data= (0.0311,0.0491,0.0692,0.0831,0.0079,0.0200,0.0981,0.1016,0.2025,0.0767,0.1767,0.2555,0.2812,0.2722,0.3227,0.3463,0.5395,0.7911,0.9064,0.8701,0.7672,0.2957,0.4148,0.6043,0.3178,0.3482,0.6158,0.8049,0.6289,0.4999,0.5830,0.6660,0.4124,0.1260,0.2487,0.4676,0.5382,0.3150,0.2139,0.1848,0.1679,0.2328,0.1015,0.0713,0.0615,0.0779,0.0761,0.0845,0.0592,0.0068,0.0089,0.0087,0.0032,0.0130,0.0188,0.0101,0.0229,0.0182,0.0046,0.0038)

#changing the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

#reshape the numpy array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
#(1,-1) there is one instance and we are reshaping it

prediction =model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]=='R'):
  print('The object is a ROCK')
else:
  print('The object is a MINE')

print(input_data_reshaped)

print(input_data)

